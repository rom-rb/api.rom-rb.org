#!/usr/bin/env ruby

require 'pathname'
require 'fileutils'
require 'yaml'

gh_url = "https://github.com/rom-rb/%{project}.git"
root = Pathname(__dir__).join('..').realpath
clone_to = root.join('gems')
projects = YAML.load_file("data/projects.yml").map { |p| p['name'] }

def generate_docs(root, project, version, doc_output_dir: nil)
  project_dir = root.join("gems/#{project}")
  doc_output_dir = doc_output_dir || root.join('docs').join(project).join(version.gsub(/^v/, ''))

  FileUtils.mkdir_p(doc_output_dir) unless doc_output_dir.exist?

  puts "Generating docs for #{project} #{version} to #{doc_output_dir}"
  system "cd #{project_dir} && git checkout #{version} &> /dev/null && yard -o #{doc_output_dir} -p #{root.join('templates')} && cd #{root}"
end

# projects.each do |project|
#   target_dir = clone_to.join(project)
#   if target_dir.exist?
#     puts "Updating #{target_dir}"
#     system "cd #{target_dir} && git pull &> /dev/null"
#   else
#     puts "Cloning #{project} to #{target_dir}"
#     system "git clone #{gh_url % { project: project }} #{target_dir} &> /dev/null"
#   end
# end

projects.each do |project|
  versions = `cd gems/#{project} && git tag`.split("\n").reject { |v| v =~ /rc|beta/ }.sort.reverse

  latest_version = versions.shift

  generate_docs(root, project, latest_version, doc_output_dir: root.join('docs').join(project))

  # TODO: figure out how to handle old versions
  # versions.each do |version|
  #   generate_docs(root, project, version)
  # end
end
